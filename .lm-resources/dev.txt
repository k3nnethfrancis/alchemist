# Alchemist Development Notes

## Project Structure

### alchemist/
├── ai/
│   ├── agents/                    # [EXAMPLES]
│   │   ├── eliza/                # Conversation workflow example
│   │   │   ├── agent.py
│   │   │   └── workflow.py
│   │   └── terminal/             # Tool execution patterns
│   │       ├── persona_agent.py
│   │       ├── reflection_agent.py
│   │       ├── session_manager.py
│   │       ├── terminal_agent.py
│   │       └── tools/
│   │           ├── custom_tools.py
│   │           ├── read_discord_messages.py
│   │           └── write_discord_message.py
│   ├── base/                     # [CORE]
│   │   ├── agent.py             # Provider-agnostic BaseAgent [DONE]
│   │   └── runtime.py           # Environment management [DONE]
│   ├── graph/                    # [CORE - IN PROGRESS ~50%]
│   │   ├── base.py              # Core graph framework
│   │   └── nodes/
│   │       ├── base/            # Base node implementations
│   │       │   ├── llm.py       # LLM node base
│   │       │   ├── testing.py   # Testing utilities
│   │       │   └── tool.py      # Tool node base
│   │       ├── actions.py       # Action node implementations
│   │       ├── context.py       # Context management
│   │       ├── decisions.py     # Decision node logic
│   │       └── evaluators.py    # Response evaluation
│   ├── prompts/                 # [CORE]
│   │   ├── base.py             # Core prompt templates
│   │   └── persona.py          # Agent personalities
│   └── tools/                   # [CORE]
│       ├── calculator.py        # Basic arithmetic [TESTED]
│       ├── discord_tool.py      # Discord integration [COMPLETE]
│       └── image.py            # Image generation [TESTED]
└── core/
    ├── extensions/              # Platform integrations
    │   ├── config.py           # Extension configuration
    │   └── discord/            # [COMPLETE]
    │       ├── client.py       # Discord bot client
    │       └── runtime.py      # Discord-specific runtime
    └── logger.py               # Centralized logging

### Additional Project Components
├── config/                     # Configuration files
│   └── channels.json          # Discord channel config [DONE]
├── examples/                   # Example implementations
│   ├── discord/               # Discord bot examples
│   │   ├── chatbot.py
│   │   ├── local_discord_reader.py
│   │   └── run_bot.py
│   ├── graph/                 # Graph workflow examples
│   │   ├── analysis_workflow.py
│   │   ├── discord_workflow.py
│   │   ├── newsletter_workflow.py
│   │   ├── reflection_workflow.py
│   │   └── workflow_test.py
│   └── local_chatbot.py
└── tests/                     # Test suite
    ├── ai/
    │   ├── base/             # Core agent tests [DONE]
    │   ├── graph/            # Graph system tests [IN PROGRESS]
    │   └── tools/            # Tool implementation tests [DONE]
    └── core/
        ├── extensions/       # Platform integration tests
        └── mirascope/        # Mirascope integration tests

## Current Status
- Tools are properly integrated and functioning:
  - CalculatorTool: Basic arithmetic operations [TESTED]
  - ImageGenerationTool: DALL-E 3 integration [TESTED]
  - DiscordTools: Channel history with embed support [COMPLETE]
    - Mirascope toolkit pattern implementation [DONE]
    - Dynamic channel configuration from config file [DONE]
    - Proper docstring templating with self attributes [DONE]
    - Supports natural language queries [DONE]
    - Handles rich embeds and attachments [DONE]
    - Configurable via bot service [DONE]
    - Returns structured JSON responses [DONE]
    - Proper error handling [DONE]
    - Tested with ai-news channel [DONE]
    - Async/await implementation with aiohttp [DONE]
    - Comprehensive functional testing [DONE]
    - Proper embed handling with None filtering [DONE]
    - Improved logging configuration [DONE]
    - Multi-channel support [IN PROGRESS]

- Newsletter Workflow System [IN PROGRESS]:
  - Base workflow implementation [DONE]
  - Content collection from Discord [DONE]
  - Link extraction and processing [DONE]
  - Template-based generation [DONE]
  - Markdown formatting [DONE]
  - File output management [DONE]
  - Needs:
    - State persistence for long runs
    - Parallel processing for channels
    - Better error recovery
    - Proper checkpointing
    - Integration with ContextSuppliers

- Testing Framework:
  - Functional tests for each tool [DONE]
  - Async test support [DONE]
  - Proper logging and verification [DONE]
  - Mock service responses [IN PROGRESS]
  - Channel configuration handling [DONE]
  - Rich embed verification [DONE]
  - None value validation [DONE]
  - Error case testing [DONE]
  - Newsletter workflow tests [PLANNED]

- Discord Extension is complete:
  - Message processing and tool execution
  - Runtime integration with local bot service
  - Channel configuration management
  - Enhanced embed handling and formatting
  - Support for service and direct modes
  - Proper async/await implementation

## Architecture Overview
1. Core Agent System [DONE]:
   - BaseAgent implementation with OpenPipe integration
   - Provider-agnostic design
   - Tool execution framework
   - Basic conversation management

2. Graph System [IN PROGRESS ~50%]:
   - Base graph implementation with node state management
   - LLM nodes for content processing
   - Support for complex workflows with decision nodes
   - Need: Enhanced state persistence and parallel execution
   - Need: Better context management between nodes

3. Agent Components [TO BUILD]:
   - ContextSuppliers (similar to Eliza's Providers):
     - Time awareness
     - User relationship tracking
     - External data integration
     - Memory injection
   - Evaluators (Reference/Alignment Systems):
     - Conversation assessment
     - Goal tracking
     - Context awareness
     - Behavioral alignment
   - Extensions (Platform Clients):
     - Discord [DONE]
     - Twitter [PLANNED]
     - LinkedIn [PLANNED]
   - ToolKits (Plugin-like Tool Collections):
     - Grouped tool functionality [IMPLEMENTED]
     - Shared context and usage patterns [IMPLEMENTED]
     - Configurable tool combinations [IMPLEMENTED]
   - Memory System:
     - Vector embeddings
     - Relational storage
     - Context-aware retrieval

## Core Components
1. agent.py:
   - Core agent functionality
   - Conversation history
   - Tool execution
   - Provider-agnostic design

2. tools.py:
   - Tool definitions and base classes
   - Sync and async tool support
   - Error handling and logging
   - Mirascope toolkit pattern:
     - BaseToolKit implementation [DONE]
     - Dynamic docstring templating [DONE]
     - Self attribute injection [DONE]
     - Proper async/await support [DONE]
     - OpenPipe integration [DONE]
     - Toolkit test patterns [DONE]

3. runtime.py:
   - Environment management
   - Session tracking
   - Platform-specific configurations
   - Extension integration

4. graph/:
   - Workflow framework
   - Node system
   - State management
   - Decision trees

## Next Steps
1. Graph System Completion:
   - Enhance state persistence
   - Add parallel execution
   - Improve context management
   - Integrate with ContextSuppliers
   - Integrate with Evaluators
   - Add checkpointing for long-running workflows
   - Implement error recovery mechanisms

2. Newsletter System Enhancements:
   - Implement parallel channel processing
   - Add state persistence
   - Integrate checkpointing
   - Add error recovery
   - Improve template management
   - Enhance link processing
   - Add content categorization

3. Agent Components:
   - Implement ContextSuppliers
   - Build Evaluator framework
   - Design ToolKit system
   - Integrate Memory system

4. Testing:
   - Graph workflow tests
   - ContextSupplier tests
   - Evaluator tests
   - Integration tests
   - Mock service responses for Discord tests

5. Documentation:
   - Architecture overview
   - Component interaction guides
   - Extension development
   - ToolKit creation

## Dependencies
- Mirascope: Core agent functionality
- OpenPipe: LLM integration
- Discord.py: Discord extension
- Pydantic: Data validation
- DALL-E 3: Image generation

## Development Priorities
1. Complete Graph System:
   - Finish core node types
   - Add state persistence
   - Implement parallel execution
   - Add checkpointing
   - Improve error handling

2. Enhance Newsletter Workflow:
   - Multi-channel support
   - State persistence
   - Error recovery
   - Template management
   - Content processing

3. Build Agent Components:
   - ContextSuppliers first
   - Evaluators second
   - Memory integration third
   - ToolKit system fourth

4. Platform Extensions:
   - Stabilize Discord [DONE]
   - Plan Twitter integration
   - Plan LinkedIn integration

## Current Debugging Notes

### Newsletter Workflow Investigation
1. Content Formatting Issues:
   - DiscordTools provides well-structured content with proper embed handling
   - Need to verify content structure preservation between nodes
   - Investigate potential data transformation issues in AnalysisNode
   - Review content grouping logic in newsletter workflow

2. Prompt Formatting:
   - Current implementation bypasses prompt template decorators
   - Should leverage alchemist.ai.prompts for consistent formatting
   - Need to implement proper prompt templates for analysis
   - Consider migrating to structured prompt system

3. State Management:
   - Potential issues with state persistence between nodes
   - Need to verify state structure after collect phase
   - Investigate state validation in node transitions
   - Add state debugging capabilities

### Next Actions
1. Create simplified graph example:
   - Implement basic collect -> analyze -> format flow
   - Use minimal content structure
   - Add comprehensive logging
   - Focus on state transitions
   - Validate prompt formatting

2. Enhance Debugging:
   - Add state inspection logging
   - Implement prompt validation
   - Add content structure verification
   - Track node transition states

3. Testing Strategy:
   - Create unit tests for content formatting
   - Validate prompt template system
   - Test state management
   - Add integration tests for node transitions

### Known Working Components
- Discord content collection (verified)
- Basic node transitions
- Content grouping logic
- Link extraction

### Areas Needing Investigation
- LLM call execution in AnalysisNode
- State structure preservation
- Prompt template integration
- Error handling in node transitions

## Notes
- Keep provider-agnostic design
- Focus on component modularity
- Plan for easy extension
- Consider memory integration points
- Design for scalability
- Enable easy toolkit creation
- Support multiple evaluation systems

## Graph Framework Analysis

### Current Implementation

1. base.py (Core Graph Framework):
   - Basic graph structure with nodes and edges
   - Simple state management
   - Sequential execution flow
   - Basic error handling

2. nodes/base.py (Base Node Types):
   - Basic Node interface
   - Simple LLMNode implementation
   - Basic prompt formatting

3. nodes/decisions.py (Decision Nodes):
   - Binary and multi-choice decisions
   - Basic LLM-based decision making
   - Simple error handling

4. nodes/actions.py (Action Nodes):
   - Basic ToolNode structure
   - Mocked tool execution

### Required Changes

1. base.py Enhancements:
   - Add support for parallel execution paths
   - Enhance state persistence with memory integration
   - Add ContextSupplier integration points
   - Add support for graph visualization
   - Add state checkpointing and recovery
   - Add support for subgraphs/nested workflows

2. nodes/base.py Enhancements:
   - Add ContextAwareNode base class
   - Add EvaluatedNode for alignment checks
   - Enhance prompt management with templates
   - Add memory-aware node base class
   - Add support for node metadata and configuration
   - Add node validation hooks

3. nodes/decisions.py Enhancements:
   - Add support for complex decision criteria
   - Integrate with Evaluators for decision validation
   - Add support for decision confidence scores
   - Add decision caching/memoization
   - Add support for fallback paths
   - Add decision explanation capabilities

4. nodes/actions.py Enhancements:
   - Integrate with actual tool system
   - Add support for ToolKit integration
   - Add parallel tool execution
   - Add tool result validation
   - Add retry mechanisms
   - Add tool execution monitoring
   - Add tool chaining capabilities

### New Components Needed

1. context.py:
   ```python
   class ContextSupplier:
       """Base class for context providers."""
       async def get_context(self, state: NodeState) -> Dict[str, Any]: ...

   class TimeAwareContext(ContextSupplier):
       """Provides time-based context."""
       ...

   class MemoryContext(ContextSupplier):
       """Provides memory-based context."""
       ...
   ```

2. evaluators.py:
   ```python
   class Evaluator:
       """Base class for response evaluation."""
       async def evaluate(self, state: NodeState, response: Any) -> bool: ...

   class AlignmentEvaluator(Evaluator):
       """Checks response alignment with goals."""
       ...

   class SafetyEvaluator(Evaluator):
       """Checks response safety."""
       ...
   ```

3. memory.py:
   ```python
   class GraphMemory:
       """Manages persistent state across executions."""
       async def store(self, key: str, value: Any): ...
       async def retrieve(self, key: str) -> Any: ...
       async def update(self, key: str, value: Any): ...
   ```

### Implementation Priority

1. Core Enhancements:
   - Parallel execution support in base.py
   - Memory integration
   - Context supplier framework
   - Tool system integration

2. Node Improvements:
   - Context-aware base nodes
   - Enhanced decision nodes
   - Full tool node implementation
   - Node validation system

3. New Components:
   - Context suppliers
   - Evaluator framework
   - Memory system
   - Graph visualization

4. Advanced Features:
   - Subgraph support
   - State persistence
   - Advanced error handling
   - Performance optimizations

## Development Notes and Roadmap

### Current Status
1. Core Agent System
   - Base implementation complete and functional [DONE]
   - OpenPipe integration working [DONE]
   - Tool system tested and working [DONE]

2. Graph System
   - Core framework implemented with NodeContext, NodeState, Node, and Graph classes
   - Base node types created:
     * LLMNode: For LLM-based operations
     * ToolNode: For tool execution
   - Workflow test implemented and functional:
     * Content filtering working
     * Analysis and categorization nodes functional
     * Terminal node handling implemented
     * State management between nodes working
   - Basic logging and debugging in place

3. Extensions
   - DiscordTools implemented and functional [DONE]
   - Channel mapping and lookback functionality working [DONE]
   - Embed handling and filtering complete [DONE]

### Next Steps
1. Graph Framework Enhancements
   - Improve state visibility and debugging
   - Strengthen error handling
   - Add validation

2. Testing and Documentation
   - Add more example workflows
   - Complete mock service responses
   - Document graph patterns and best practices

3. Tools Integration
   - Integrate more AI tools
   - Add tool validation framework
   - Create tool discovery mechanism

### Backlog
- Memory system implementation
- Context supplier framework
- Evaluator system
- Character system integration
- Workflow templating system
- Graph visualization tools
- Performance monitoring
- State persistence
- Parallel execution support

### Completed
✓ Base agent implementation
✓ OpenPipe integration
✓ Tool system foundation
✓ Discord toolkit implementation
✓ Embed handling and filtering
✓ Functional testing framework
✓ Error case handling
✓ Channel configuration system
